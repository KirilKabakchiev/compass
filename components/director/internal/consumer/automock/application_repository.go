// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ApplicationRepository is an autogenerated mock type for the ApplicationRepository type
type ApplicationRepository struct {
	mock.Mock
}

// ExistsApplicationByAPIDefinitionIDAndAuthID provides a mock function with given fields: ctx, tenantID, id, authID
func (_m *ApplicationRepository) ExistsApplicationByAPIDefinitionIDAndAuthID(ctx context.Context, tenantID string, id string, authID string) (bool, error) {
	ret := _m.Called(ctx, tenantID, id, authID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, tenantID, id, authID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, id, authID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsApplicationByDocumentIDAndAuthID provides a mock function with given fields: ctx, tenantID, id, authID
func (_m *ApplicationRepository) ExistsApplicationByDocumentIDAndAuthID(ctx context.Context, tenantID string, id string, authID string) (bool, error) {
	ret := _m.Called(ctx, tenantID, id, authID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, tenantID, id, authID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, id, authID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsApplicationByEventDefinitionIDAndAuthID provides a mock function with given fields: ctx, tenantID, id, authID
func (_m *ApplicationRepository) ExistsApplicationByEventDefinitionIDAndAuthID(ctx context.Context, tenantID string, id string, authID string) (bool, error) {
	ret := _m.Called(ctx, tenantID, id, authID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, tenantID, id, authID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, id, authID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsApplicationByIDAndAuthID provides a mock function with given fields: ctx, tenantID, id, authID
func (_m *ApplicationRepository) ExistsApplicationByIDAndAuthID(ctx context.Context, tenantID string, id string, authID string) (bool, error) {
	ret := _m.Called(ctx, tenantID, id, authID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, tenantID, id, authID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, id, authID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsApplicationByPackageIDAndAuthID provides a mock function with given fields: ctx, tenantID, id, authID
func (_m *ApplicationRepository) ExistsApplicationByPackageIDAndAuthID(ctx context.Context, tenantID string, id string, authID string) (bool, error) {
	ret := _m.Called(ctx, tenantID, id, authID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, tenantID, id, authID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, id, authID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsApplicationByPackageInstanceAuthIDAndAuthID provides a mock function with given fields: ctx, tenantID, id, authID
func (_m *ApplicationRepository) ExistsApplicationByPackageInstanceAuthIDAndAuthID(ctx context.Context, tenantID string, id string, authID string) (bool, error) {
	ret := _m.Called(ctx, tenantID, id, authID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, tenantID, id, authID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, id, authID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsApplicationByWebhookIDAndAuthID provides a mock function with given fields: ctx, tenantID, id, authID
func (_m *ApplicationRepository) ExistsApplicationByWebhookIDAndAuthID(ctx context.Context, tenantID string, id string, authID string) (bool, error) {
	ret := _m.Called(ctx, tenantID, id, authID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, tenantID, id, authID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, id, authID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
