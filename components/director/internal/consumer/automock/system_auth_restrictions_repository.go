// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SystemAuthRestrictionsRepository is an autogenerated mock type for the SystemAuthRestrictionsRepository type
type SystemAuthRestrictionsRepository struct {
	mock.Mock
}

// ExistsSystemAuthRestrictionByAppIDAndAuthID provides a mock function with given fields: ctx, tenantID, id, appID
func (_m *SystemAuthRestrictionsRepository) ExistsSystemAuthRestrictionByAppIDAndAuthID(ctx context.Context, tenantID string, id string, appID string) (bool, error) {
	ret := _m.Called(ctx, tenantID, id, appID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, tenantID, id, appID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, id, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsSystemAuthRestrictionByIntegrationSystemIDAndAuthID provides a mock function with given fields: ctx, tenantID, id, appID
func (_m *SystemAuthRestrictionsRepository) ExistsSystemAuthRestrictionByIntegrationSystemIDAndAuthID(ctx context.Context, tenantID string, id string, appID string) (bool, error) {
	ret := _m.Called(ctx, tenantID, id, appID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, tenantID, id, appID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, id, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsSystemAuthRestrictionByRuntimeIDAndAuthID provides a mock function with given fields: ctx, tenantID, id, appID
func (_m *SystemAuthRestrictionsRepository) ExistsSystemAuthRestrictionByRuntimeIDAndAuthID(ctx context.Context, tenantID string, id string, appID string) (bool, error) {
	ret := _m.Called(ctx, tenantID, id, appID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, tenantID, id, appID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, id, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
