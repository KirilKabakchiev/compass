// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	systemauthrestrictions "github.com/kyma-incubator/compass/components/director/internal/domain/systemauthrestrictions"
	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Converter is an autogenerated mock type for the EntityConverter type
type Converter struct {
	mock.Mock
}

// FromEntity provides a mock function with given fields: in
func (_m *Converter) FromEntity(in systemauthrestrictions.Entity) (model.SystemAuthRestrictions, error) {
	ret := _m.Called(in)

	var r0 model.SystemAuthRestrictions
	if rf, ok := ret.Get(0).(func(systemauthrestrictions.Entity) model.SystemAuthRestrictions); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(model.SystemAuthRestrictions)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(systemauthrestrictions.Entity) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToEntity provides a mock function with given fields: in
func (_m *Converter) ToEntity(in model.SystemAuthRestrictions) (systemauthrestrictions.Entity, error) {
	ret := _m.Called(in)

	var r0 systemauthrestrictions.Entity
	if rf, ok := ret.Get(0).(func(model.SystemAuthRestrictions) systemauthrestrictions.Entity); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(systemauthrestrictions.Entity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.SystemAuthRestrictions) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
